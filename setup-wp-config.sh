#!/bin/bash
set -x

# üì¶ Carregar vari√°veis do .env
if [ -f /var/www/.env ]; then
  set -o allexport
  source /var/www/.env || echo "‚ö†Ô∏è Erro ao carregar .env"
  set +o allexport
fi

# ‚úÖ Validar vari√°veis obrigat√≥rias
required_vars=("WORDPRESS_DB_NAME" "WORDPRESS_DB_USER" "WORDPRESS_DB_PASSWORD" "WORDPRESS_DB_HOST")
for var in "${required_vars[@]}"; do
  if [ -z "${!var}" ]; then
    echo "‚ùå Vari√°vel $var n√£o est√° definida no .env"
    exit 1
  fi
done

# ‚úÖ Mostrar vari√°veis carregadas
echo "‚úÖ WORDPRESS_DB_HOST=$WORDPRESS_DB_HOST"
echo "‚úÖ WORDPRESS_DB_USER=$WORDPRESS_DB_USER"
echo "‚úÖ WORDPRESS_DB_PASSWORD=$WORDPRESS_DB_PASSWORD"
echo "‚úÖ WORDPRESS_DB_NAME=$WORDPRESS_DB_NAME"
echo "‚úÖ JWT_AUTH_SECRET_KEY=$JWT_AUTH_SECRET_KEY"
echo "‚úÖ SITE_URL=$SITE_URL"
echo "‚úÖ WP_DEBUG=$WP_DEBUG"

WPCONFIG="/var/www/html/wp-config.php"
WPCONFIG_TEMPLATE="/var/www/html/wp-config-template.php"

# üìÑ Criar wp-config.php se n√£o existir
if [ ! -f "$WPCONFIG" ]; then
    echo "üõ†Ô∏è Criando wp-config.php a partir do template..."
    cp "$WPCONFIG_TEMPLATE" "$WPCONFIG"
fi

# üßΩ Limpar ^M (CRLF) de Windows
echo "üßπ Limpando ^M do wp-config.php..."
sed -i 's/\r$//' "$WPCONFIG"

# üîê Gerar JWT_AUTH_SECRET_KEY se n√£o estiver definido
if [ -z "$JWT_AUTH_SECRET_KEY" ]; then
  export JWT_AUTH_SECRET_KEY=$(openssl rand -base64 64)
  echo "üîê JWT_AUTH_SECRET_KEY gerado dinamicamente"
else
  echo "üîê JWT_AUTH_SECRET_KEY j√° existe, pulando..."
fi

# üîÅ Substituir getenv() pelos valores reais
sed -i "s/getenv('WORDPRESS_DB_NAME')/'${WORDPRESS_DB_NAME}'/" "$WPCONFIG"
sed -i "s/getenv('WORDPRESS_DB_USER')/'${WORDPRESS_DB_USER}'/" "$WPCONFIG"
sed -i "s/getenv('WORDPRESS_DB_PASSWORD')/'${WORDPRESS_DB_PASSWORD}'/" "$WPCONFIG"
sed -i "s/getenv('WORDPRESS_DB_HOST')/'${WORDPRESS_DB_HOST}'/" "$WPCONFIG"
sed -i "s/getenv('WP_DEBUG') === 'true'/true/" "$WPCONFIG"
sed -i "s/getenv('JWT_AUTH_SECRET_KEY')/'${JWT_AUTH_SECRET_KEY}'/" "$WPCONFIG"

# ‚ûï Adicionar define() se n√£o existir
insert_define() {
  local key="$1"
  local value="$2"
  if ! grep -q "define('$key'," "$WPCONFIG"; then
    echo "‚ûï Adicionando define('$key', $value) ao wp-config.php"
    sed -i "/^\/\* That's all, stop editing! Happy publishing. \*\//i define('$key', $value);" "$WPCONFIG"
  else
    echo "‚úîÔ∏è $key j√° existe em wp-config.php, pulando..."
  fi
}

insert_define "FS_METHOD" "'direct'"
insert_define "JWT_AUTH_CORS_ENABLE" "true"

# üïí Aguardar MySQL estar pronto
echo "‚è≥ Aguardando MySQL estar pronto..."
until mysqladmin ping -h"$WORDPRESS_DB_HOST" --silent; do
  sleep 5
done
echo "‚úÖ MySQL est√° pronto!"

# üß™ Executar script de inicializa√ß√£o do banco de dados
if [ -f /usr/local/bin/init-db.sh ]; then
  echo "üóÑÔ∏è Executando init-db.sh..."
  /bin/bash /usr/local/bin/init-db.sh
else
  echo "‚ö†Ô∏è init-db.sh n√£o encontrado."
fi

# üß∞ Verificar instala√ß√£o do WordPress
if ! wp core is-installed --allow-root; then
    echo "‚ö†Ô∏è WordPress ainda n√£o est√° instalado. Instalando agora..."
    wp core install \
        --url="$SITE_URL" \
        --title="Meu Site WordPress" \
        --admin_user="$WORDPRESS_USER" \
        --admin_password="$WORDPRESS_PWD" \
        --admin_email="admin@example.com" \
        --allow-root
    echo "‚úîÔ∏è WordPress instalado com sucesso!"
else
    echo "‚úîÔ∏è WordPress j√° est√° instalado, pulando instala√ß√£o."
fi

# üîê Permiss√µes
chown www-data:www-data "$WPCONFIG"
chmod 664 "$WPCONFIG"

# üîç Mostrar √∫ltimas linhas do wp-config.php (debug)
echo "üìÑ Conte√∫do final do wp-config.php:"
tail -n 20 "$WPCONFIG"

# üöÄ Inicializar Apache
echo "====================================="
echo "‚úÖ Ambiente WordPress preparado!"
echo "====================================="
exec docker-entrypoint.sh apache2-foreground